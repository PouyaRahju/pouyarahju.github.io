import socket
import select


class Pentest:
    def __init__(self):
        self.servers = []

    def AddServer(self,host , port):
        self.servers.append((host,port))
    
    def RemoveServer(self,host , port):
        self.servers.remove((host,port))
    

    def RunNonBlockingMode(self):
        if not self.servers:
            print("No Server added.")
            return
        self.NonBlockingMode(self.servers)

    def NonBlockingMode(self,server_list):
        sockets = {}

        for server in server_list:
            sock = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
            sock.setblocking(False)
            sock.connect_ex(server)
            sockets[sock] = server
            print(f"Socket for {server} created.")


        readlist = list(sockets.keys())
        writelist = readlist
        while readlist or writelist:
            readable_sockets  ,  writable_sockets, exceptional_sockets = select.select( readlist , writelist , readlist )

            for s in readable_sockets:
                try:

                    data = s.recv(1024)
                    if data:
                        print(f"\n\nData of {sockets[s]}:  {data}")
                    else:
                        s.close()
                        readlist.remove(s)
                        if s in writelist: writelist.remove(s)

                except:
                    s.close()
                    readlist.remove(s)
                    if s in writelist: writelist.remove(s)

            for s in writable_sockets:
                if s in readlist:
                    try:
                        s.sendall(b"HTTP/1.1 Hello")
                    except:
                        s.close()
                        writelist.remove(s)
                        if s in readlist:  readlist.remove(s)
            
            for s in exceptional_sockets:
                print(f"\n\nError in {sockets[s]}")
                s.close()
                if s in writelist: writelist.remove(s)
                if s in readlist:  readlist.remove(s)


    def RunBlockingMode(self):
        if not self.servers:
            print("No Server added.")
            return
        for i in self.servers:
            self.BlockingMode(i[0], i[1])
        
    def BlockingMode(self,host, port ):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            print(f"Socket for {host}:{port} created.")
            print(f"Connecting to {host}:{port}...")
            sock.connect((host,port))
            print(f"Connected to {host}:{port}.")
            sock.sendall(b"HTTP/1.1 Hello")
            print(f"Sent.")
            print(f"Wait for {host}:{port} Response.")
            data = sock.recv(1024)
            print(f"Response of {host}:{port} :  {data}")
            sock.close()
        except:
            print(f"{host}:{port} Connection Error.")
